{
  "name": "prototype",
  "nodes": [
    {
      "parameters": {
        "operation": "pdf",
        "binaryPropertyName": "file",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        16,
        -32
      ],
      "id": "2b59033a-e04c-425d-aa29-a2f103ea4b4d",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "mode": "insert",
        "memoryKey": {
          "__rl": true,
          "mode": "id",
          "value": "vector_store_key"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreInMemory",
      "typeVersion": 1.3,
      "position": [
        224,
        -32
      ],
      "id": "16f58550-bb04-4958-b57b-caa0e6296300",
      "name": "Simple Vector Store"
    },
    {
      "parameters": {
        "textSplittingMode": "custom",
        "options": {
          "metadata": {
            "metadataValues": [
              {}
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1.1,
      "position": [
        368,
        176
      ],
      "id": "a1fb1ce4-10c7-41cb-8290-cb6382bf98d1",
      "name": "Default Data Loader"
    },
    {
      "parameters": {
        "chunkOverlap": 100,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        400,
        368
      ],
      "id": "6444f7f1-1359-4edd-83f3-8841e50eb004",
      "name": "Recursive Character Text Splitter"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        208,
        176
      ],
      "id": "aec7beb8-2e44-42d8-918f-a410845ff7b4",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "gGCxh5YRKuV4EGcP",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.text }}",
        "options": {
          "systemMessage": "You are a helpful AI assistant that answers questions about an uploaded document. \nThe user will upload a file (PDF or DOCX), and you have access to a tool that retrieves \nrelevant text chunks from this document.\n\nInstructions:\n- Always use the retrieval tool to get information before answering.\n- Base your answers only on the content of the document. If the answer is not found, say \n  \"I could not find this information in the uploaded file.\"\n- When possible, include short quotes or section/page references from the document to support your answer.\n- Be concise, accurate, and professional in your responses.\n",
          "returnIntermediateSteps": true,
          "enableStreaming": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -144,
        640
      ],
      "id": "abb26501-6090-4243-b7a3-735fec924f51",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -288,
        848
      ],
      "id": "d209d191-ce08-489f-8838-6324f75c8dbb",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "gGCxh5YRKuV4EGcP",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "=Use this tool to answer ANY question related to the uploaded document. \nYou MUST always call this tool first before answering. \nIt returns the most relevant passages from the document. \nIf the tool returns no results, say: \"I could not find this information in the uploaded file.\"\n",
        "memoryKey": {
          "__rl": true,
          "mode": "id",
          "value": "vector_store_key"
        },
        "topK": 10
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreInMemory",
      "typeVersion": 1.3,
      "position": [
        176,
        816
      ],
      "id": "fb44d025-9c17-4a88-82f1-f44fa14a410f",
      "name": "Simple Vector Store1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        272,
        1024
      ],
      "id": "8e7a8c27-eef1-4bff-9b16-74bab6112834",
      "name": "Embeddings OpenAI1",
      "credentials": {
        "openAiApi": {
          "id": "gGCxh5YRKuV4EGcP",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "d64ccd71-64d3-4b76-8a20-f2117d1599ac",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -1104,
        304
      ],
      "id": "89afb79b-8bec-420a-b86b-72157a6bf3ce",
      "name": "Webhook",
      "webhookId": "d64ccd71-64d3-4b76-8a20-f2117d1599ac"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.output }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        800,
        624
      ],
      "id": "ca422e10-fcda-4b9d-82b4-ee720e5e4b3a",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.message }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notEmpty",
                      "singleValue": true
                    },
                    "id": "92539ec0-b000-42be-9d21-1feeeca5e3bc"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "f280256c-d98b-4c10-97b2-48224a36f3f6",
                    "leftValue": "=file",
                    "rightValue": "application/pdf",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "allMatchingOutputs": false
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -688,
        304
      ],
      "id": "34c02bb1-849a-45a7-bf59-a3720422074d",
      "name": "Switch"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c61ed7b2-6c3d-46c9-9efc-ff342e96b696",
              "name": "text",
              "value": "={{ $json.body.message }}",
              "type": "string"
            },
            {
              "id": "c0fab7fd-dd16-4602-9479-07c768a51654",
              "name": "webhook",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "9ac81b01-2979-493b-9c89-3612fdcc32a4",
              "name": "sessionId",
              "value": "={{ $json.sessionId }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -528,
        432
      ],
      "id": "d31cf106-ef01-4ca3-b0b0-0ffaf2ee46f9",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "355ad6df-9527-4055-8363-aac8eebbf2d0",
              "leftValue": "={{ $('Edit Fields').item.json.webhook }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        208,
        640
      ],
      "id": "bd01f147-fe36-4712-b611-92b1283f25e7",
      "name": "If"
    },
    {
      "parameters": {
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -144,
        848
      ],
      "id": "2bafa4eb-9fa3-4972-a48a-0a966af51e03",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "uploaded successfully",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        576,
        -32
      ],
      "id": "45f948e1-4a2d-45e7-a577-b7b98b8df8ab",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  return {\n    json: {\n      ...item.json,\n      sessionId: item.json.sessionId ?? (Date.now().toString() + Math.floor(Math.random() * 10000))\n    },\n    binary: item.binary // 🔥 keep the uploaded file here\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -896,
        304
      ],
      "id": "dfcaed85-38e1-4294-a4d7-580cfeead908",
      "name": "Code"
    }
  ],
  "pinData": {},
  "connections": {
    "Extract from File": {
      "main": [
        [
          {
            "node": "Simple Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Simple Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Simple Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Vector Store1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Simple Vector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Simple Vector Store": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2975a453-ee3a-4d64-96f1-a0020e7020aa",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "2b92483af2b565bdd796faaa595ad377d656a5b17b3c3f23377f4dae74a7999a"
  },
  "id": "Zecn8snM9TQ7sQyB",
  "tags": []
}